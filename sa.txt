1. Алгоритм — последовательность действий для решения задачи. Свойства: конечность, определенность, результативность, универсальность. Представление: текст, блок-схемы, псевдокод.

2. C# — объектно-ориентированный язык программирования от Microsoft, используется для разработки приложений на платформе .NET.

3. Основные особенности C#: статическая типизация, поддержка ООП, сборка мусора, богатая стандартная библиотека, кроссплатформенность (через .NET Core).

4. Основные типы данных: int, float, double, char, string, bool.

5. Метод — блок кода, выполняющий определенную задачу. Структура: модификатор доступа, тип возвращаемого значения, имя, параметры. Используется для организации кода и повторного использования.

6. Объявление переменной: `тип имя_переменной;`, например, `int x;`.

7. Исключения обрабатываются с помощью блоков `try`, `catch`, `finally`.

8. Основные операторы условий: `if`, `else`, `switch`.

9. Обработка исключений: 
   ```csharp
   try {
       // код
   } catch (Exception ex) {
       // обработка
   } finally {
       // код, выполняемый всегда
   }

10. Ввод-вывод: Console.ReadLine(), Console.WriteLine(), работа с файлами через StreamReader, StreamWriter.

11    Инструменты отладки: Visual Studio Debugger, точки останова, просмотр переменных, трассировка.

 12   Повторение: см. пункт 5.

13    Функция — независимый блок кода, метод — привязан к классу.

 14   Генераторы — функции, возвращающие итераторы с помощью yield. Используются для ленивой генерации последовательностей.

15    Типы данных: int, float, str, list, dict и др. Работа через операции, методы и функции.

16    == сравнивает значения, is — идентичность объектов.

17    Глобальные переменные доступны везде, локальные — только в функции. Это влияет на область видимости.

 18   Итераторы — объекты, позволяющие перебирать элементы коллекции. Используются с iter() и next().

 19   Наследование: создание нового класса на основе существующего с помощью class Subclass(ParentClass):.

  20  Наследование в C#: позволяет создавать производные классы с помощью :.

 21   Класс — шаблон, объект — экземпляр класса.
22	class MyClass {

       // поля и методы

   	}
23

 24   Повторение: см. пункт 5.

 25   Повторение: см. пункт 2.

 26   C# статически типизирован, поддерживает ООП, компилируется, в то время как Python динамически типизирован и интерпретируем.

  27  Работа с файлами: File.ReadAllText(), File.WriteAllText(), StreamReader, StreamWriter.

 28   Работа с БД: ADO.NET, Entity Framework для взаимодействия с SQL Server и другими БД.

  29  int — 32 бита, long — 64 бита. int для небольших чисел, long для больших.

 30   Основные типы: int, float, char, string. Операторы присваивания: =, например, x = 5;.

 31   Цикл for:

csharp

for (int i = 0; i < 10; i++) { }
32 

 33  Массивы: коллекции фиксированной длины. Объявление: int[] arr = new int[5];. Доступ: arr[0].

 34   Рекурсия — функция вызывает саму себя. Пример: факториал. Преимущества: простота, недостатки: возможен переполнение стека.

 35   Метод: см. пункт 5. Для целых чисел используется int. Оператор if проверяет условие.

 36   Цикл for: инициализация, условие, инкремент. Если условие ложно, тело цикла не выполнится.

  37  Преимущества C#: высокая производительность, безопасность типов, поддержка многопоточности. Используется для разработки веб-приложений, игр, десктопных приложений.

